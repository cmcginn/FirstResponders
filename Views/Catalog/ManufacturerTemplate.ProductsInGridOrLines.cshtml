@model ManufacturerModel
@{
    Layout = "~/Views/Shared/_ColumnsThree.cshtml";
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    var canonicalUrlsEnabled = EngineContext.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var manufacturerUrl = Url.RouteUrl("Manufacturer", new { manufacturerId = Model.Id, SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(manufacturerUrl);
    }
}
@using Nop.Core;
@using Nop.Core.Domain.Common;
@using Nop.Core.Infrastructure;
@using Nop.Web;
@using Nop.Web.Framework.UI;
@using Nop.Web.Models.Catalog;
@using Nop.Web.Extensions;
<div class="manufacturer-page">
    <div class="page-title">
        <h1>@Model.Name</h1>
    </div>
    <div class="clear">
    </div>
    @*description*@
    <div class="manufacturer-description">
        @Html.Raw(Model.Description)
    </div>
    <div class="clear">
    </div>


    
    @*featured products*@
    @if (Model.FeaturedProducts.Count > 0)
    {
        <div class="featured-product-grid">
            <div class="title">
                @T("Products.FeaturedProducts")
            </div>
            <div>
                @(Html.DataList<ProductModel>(Model.FeaturedProducts, 2,
                    @<div class="item-box">
                        @Html.Partial("_ProductBox", @item)
                    </div>
                ))
            </div>
        </div>
        <div class="clear">
        </div>
    }
    
    
    
    
    @*view mode*@
    @if (Model.AllowProductViewModeChanging && Model.Products.Count > 0)
    {
        <div class="product-viewmode">
            @Html.LabelFor(model => model.PagingFilteringContext.ViewMode)
            @Html.DropDownList("products-viewmode", Model.AvailableViewModes, new { onchange = "setLocation(this.value);" })
        </div>
    }   
    
    
    @*sorting*@
    @if (Model.AllowProductFiltering && Model.Products.Count > 0)
    {
        <div class="product-sorting">
            @Html.LabelFor(model => model.PagingFilteringContext.OrderBy)
            @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { onchange = "setLocation(this.value);" })
        </div>
    }
    
    @*page size*@
    @if (Model.AllowCustomersToSelectPageSize && Model.Products.Count > 0)
    {
        <div class="product-page-size">
            <span>@T("Manufacturers.PageSize")</span>
            <span>@Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { onchange = "setLocation(this.value);" })</span>
            <span>@T("Manufacturers.PageSize.PerPage")</span>
        </div>
    }
    <div class="clear">
    </div>
    
    @*filtering*@
    @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
    {
        <div class="product-filters">
            <div class="filter-title">
                <span>@T("Filtering.FilterResults")</span>
            </div>
            <div class="filter-item">
                @Html.Partial("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter, new ViewDataDictionary())
            </div>
        </div>
        <div class="clear">
        </div>
    }
    
    
    
    
    @*product list*@
    @if (Model.Products.Count > 0)
    {
        if (Model.PagingFilteringContext.ViewMode == "list")
        {
            @*list mode*@
            <div class="product-list">
            @foreach (var product in Model.Products)
            {
                <div class="item-box">
                    @Html.Partial("_ProductBox", product)
                </div>
            }
            </div>      
        }
        else
        {
            @*grid mode*@
            <div class="product-grid">
                @(Html.DataList<ProductModel>(Model.Products, 2,
                    @<div class="item-box">
                        @Html.Partial("_ProductBox", @item)
                    </div>
                ))
            </div>
        }
    }
    
            <div class="clear">
            </div>  
    
    @*TODO allow customer to select page size*@
    
    <div class="pager">
    @Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber")
    </div>
</div>
